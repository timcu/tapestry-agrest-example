package com.triptera.tagrest.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import com.triptera.tagrest.model.cayenne.Category;

/**
 * Class _Book was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Book extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> AUTHOR = PropertyFactory.createString("author", String.class);
    public static final StringProperty<String> TITLE = PropertyFactory.createString("title", String.class);
    public static final EntityProperty<Category> CATEGORY = PropertyFactory.createEntity("category", Category.class);

    protected String author;
    protected String title;

    protected Object category;

    public void setAuthor(String author) {
        beforePropertyWrite("author", this.author, author);
        this.author = author;
    }

    public String getAuthor() {
        beforePropertyRead("author");
        return this.author;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setCategory(Category category) {
        setToOneTarget("category", category, true);
    }

    public Category getCategory() {
        return (Category)readProperty("category");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "author":
                return this.author;
            case "title":
                return this.title;
            case "category":
                return this.category;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "author":
                this.author = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "category":
                this.category = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.author);
        out.writeObject(this.title);
        out.writeObject(this.category);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.author = (String)in.readObject();
        this.title = (String)in.readObject();
        this.category = in.readObject();
    }

}
